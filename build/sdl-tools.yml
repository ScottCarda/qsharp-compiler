##
# Runs scanning tools from security team. 
# See https://www.1eswiki.com/wiki/Secure_Development_Tools_Extension_For_Azure_DevOps
##
steps:
- task: ComponentGovernanceComponentDetection@0
  displayName: 'Components Detection'
  inputs:
    snapshotForceEnabled: true
  condition: and(succeededOrFailed(), variables.SDLScan)


- task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
  displayName: 'SDL: Anti-Malware scan of build sources and/or artifacts'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
  displayName: 'SDL: Run AutoApplicability'
  inputs:
    ExternalRelease: true
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
  displayName: 'SDL: Analyze managed and unmanaged binaries (exe, dll) for security vulnerabilities (BinSkim)'
  inputs:
    InputType: Basic
    AnalyzeTarget: '$(DllsToScan)'
    AnalyzeVerbose: true
    AnalyzeHashes: true
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
  displayName: 'SDL: Analyze complexity of managed C# code (CodeMetrics)'
  inputs:
    Files: '$(DllsToScan)'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'SDL: Analyze source and build output text files for credentials (CredScan)'
  inputs:
    debugMode: false
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-fxcop.FxCop@2
  displayName: 'SDL: Analyze C# code (.NET framework only) for security vulnerabilities (FxCop)'
  inputs:
    inputType: Basic
    targets: '$(DllsToScan)'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-prefast.SDLNativeRules@2
  displayName: 'SDL: Run the PREfast SDL Native Rules for MSBuild'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
  displayName: 'SDL: Create Vulnerability Assessment'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
  displayName: 'SDL: Publish Security Analysis Logs'
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
  displayName: 'SDL: Post Analysis'
  inputs:
    BinSkim: true
    CredScan: true
    SDLNativeRules: true
  continueOnError: true
  condition: and(succeededOrFailed(), variables.SDLScan)